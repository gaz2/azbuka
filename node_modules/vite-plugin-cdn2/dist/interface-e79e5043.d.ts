import { FilterPattern } from '@rollup/pluginutils';

interface Module {
    name: string;
    global?: string;
}
interface TrackModule extends Module {
    spare?: Array<string> | string;
    relativeModule?: string;
    aliases?: Array<string>;
}
interface IIFEModuleInfo extends TrackModule {
    version: string;
    unpkg?: string;
    jsdelivr?: string;
}
type ResolverFunction = (p: string, extra: IIFEModuleInfo) => string;
interface ModuleInfo extends IIFEModuleInfo {
    bindings: Set<string>;
    code?: string;
    resolve?: string | ResolverFunction;
}
interface IModule extends TrackModule {
    resolve?: string | ResolverFunction;
}
interface Serialization {
    url?: Set<string>;
    type?: string;
    name: string;
    tag: 'link' | 'script';
    extra: Record<string, any>;
}
type ScriptAttributes = Partial<Pick<HTMLScriptElement, 'async' | 'crossOrigin' | 'defer' | 'integrity' | 'noModule' | 'nonce' | 'referrerPolicy' | 'type'>>;
type LinkAttrobites = Partial<Pick<HTMLLinkElement, 'as' | 'crossOrigin' | 'href' | 'hreflang' | 'imageSizes' | 'imageSrcset' | 'integrity' | 'media' | 'referrerPolicy' | 'rel' | 'title' | 'type'>>;
type ScriptNode = ScriptAttributes & Omit<Serialization, 'tag' | 'type'> & {
    tag: 'script';
};
type LinkNode = LinkAttrobites & Omit<Serialization, 'tag' | 'type'> & {
    tag: 'link';
};
interface InjectVisitor {
    script?: (node: ScriptNode) => void;
    link?: (node: LinkNode) => void;
}
type Pretty<T> = {
    [key in keyof T]: T[key] extends (...args: any[]) => any ? (...args: Parameters<T[key]>) => ReturnType<T[key]> : T[key] & NonNullable<unknown>;
} & NonNullable<unknown>;
type CDNPluginOptions = Pretty<{
    modules?: Array<IModule | string>;
    url?: string;
    transform?: () => InjectVisitor;
    include?: FilterPattern;
    exclude?: FilterPattern;
    logLevel?: 'slient' | 'warn';
    resolve?: ResolverFunction;
    apply?: 'build' | 'serve';
}>;
type ExternalPluginOptions = Pretty<{
    modules?: Array<Required<Module>>;
    include?: FilterPattern;
    exclude?: FilterPattern;
}>;

export { CDNPluginOptions as C, ExternalPluginOptions as E, InjectVisitor as I, ModuleInfo as M, TrackModule as T, Module as a, IModule as b };
