import { join as join$1 } from 'path';
import { useNuxt, addTemplate, createResolver, addPlugin, defineNuxtModule } from '@nuxt/kit';
import { existsSync } from 'fs';
import { resolve, join } from 'pathe';

const icon = (pwa) => {
  if (!pwa.icon || !pwa.manifest) {
    return;
  }
  const nuxt = useNuxt();
  if (!pwa.icon.source) {
    pwa.icon.source = resolve(nuxt.options.srcDir, nuxt.options.dir.public, pwa.icon.fileName);
  }
  if (!existsSync(pwa.icon.source)) {
    console.warn(`[pwa] [icon] Icon not found in ${pwa.icon.source}`);
    return;
  }
  if (pwa.icon.sizes.length === 0) {
    pwa.icon.sizes = [64, 120, 144, 152, 192, 384, 512];
  }
  for (const size of pwa.icon.sizes) {
    pwa.manifest.icons.push({
      src: "/icon.png",
      type: "image/png",
      sizes: `${size}x${size}`,
      purpose: "any maskable"
    });
  }
};

const manifest = (pwa) => {
  if (!pwa.manifest) {
    return;
  }
  addTemplate({
    filename: "manifest.json",
    dst: join(pwa._buildDir, "manifest.json"),
    write: true,
    getContents: () => JSON.stringify(pwa.manifest, null, 2)
  });
  pwa._manifestMeta = { rel: "manifest", href: "/manifest.json" };
};

const meta = (pwa) => {
  if (!pwa.meta || !pwa.manifest) {
    return;
  }
  const options = pwa.meta;
  const nuxt = useNuxt();
  const head = nuxt.options.app.head;
  if (options.mobileApp) {
    head.meta.push({ name: "mobile-web-app-capable", content: "yes" });
  }
  if (options.mobileAppIOS) {
    head.meta.push({ name: "apple-mobile-web-app-capable", content: "yes" });
  }
  if (options.mobileAppIOS || options.appleStatusBarStyle) {
    head.meta.push({
      hid: "apple-mobile-web-app-status-bar-style",
      name: "apple-mobile-web-app-status-bar-style",
      content: options.appleStatusBarStyle || "default"
    });
  }
  if (pwa.manifest && pwa.manifest.icons && pwa.manifest.icons.length > 0) {
    const iconSmall = pwa.manifest.icons[0];
    const iconBig = pwa.manifest.icons[pwa.manifest.icons.length - 1];
    if (options.favicon) {
      head.link.push({ rel: "shortcut icon", href: iconSmall.src });
      head.link.push({ rel: "apple-touch-icon", href: iconBig.src, sizes: iconBig.sizes });
    }
  }
  head.title = options.name;
  head.meta.push({ hid: "apple-mobile-web-app-title", name: "apple-mobile-web-app-title", content: options.name });
  if (options.author) {
    head.meta.push({ name: "author", content: options.author });
  }
  if (options.description) {
    head.meta.push({ name: "description", content: options.description });
  }
  const themeColor = pwa.meta.theme_color || pwa.manifest && pwa.manifest.theme_color;
  if (themeColor) {
    head.meta.push({ name: "theme-color", content: themeColor });
  }
  if (options.lang) {
    head.htmlAttrs = head.htmlAttrs || {};
    head.htmlAttrs.lang = options.lang;
  }
  if (options.ogType) {
    head.meta.push({ property: "og:type", content: options.ogType });
  }
  if (options.ogHost && options.ogUrl === true) {
    options.ogUrl = options.ogHost;
  }
  if (options.ogUrl && options.ogUrl !== true) {
    head.meta.push({ property: "og:url", content: options.ogUrl });
  }
  if (options.ogTitle === true) {
    options.ogTitle = options.name;
  }
  if (options.ogTitle) {
    head.meta.push({ property: "og:title", content: options.ogTitle });
  }
  if (options.ogSiteName === true) {
    options.ogSiteName = options.name;
  }
  if (options.ogSiteName) {
    head.meta.push({ property: "og:site_name", content: options.ogSiteName });
  }
  if (options.ogDescription === true) {
    options.ogDescription = options.description;
  }
  if (options.ogDescription) {
    head.meta.push({ property: "og:description", content: options.ogDescription });
  }
  if (options.ogImage === true) {
    if (pwa.manifest.icons && pwa.manifest.icons.length > 0) {
      const iconBig = pwa.manifest.icons[pwa.manifest.icons.length - 1];
      const [width, height] = iconBig.sizes.split("x").map((x) => +x);
      options.ogImage = { path: iconBig.src, width, height, type: iconBig.type };
    } else {
      options.ogImage = false;
    }
  } else if (typeof options.ogImage === "string") {
    options.ogImage = { path: options.ogImage };
  }
  if (options.ogImage) {
    const isUrl = (path) => /^https?:/.test(path);
    if (options.ogHost || isUrl(options.ogImage.path)) {
      head.meta.push({
        property: "og:image",
        content: isUrl(options.ogImage.path) ? options.ogImage.path : options.ogHost + options.ogImage.path
      });
      if (options.ogImage.width && options.ogImage.height) {
        head.meta.push({ property: "og:image:width", content: options.ogImage.width });
        head.meta.push({ property: "og:image:height", content: options.ogImage.height });
      }
      if (options.ogImage.type) {
        head.meta.push({ property: "og:image:type", content: options.ogImage.type });
      }
    }
  }
  if (options.twitterCard) {
    head.meta.push({ name: "twitter:card", content: options.twitterCard });
  }
  if (options.twitterSite) {
    head.meta.push({ name: "twitter:site", content: options.twitterSite });
  }
  if (options.twitterCreator) {
    head.meta.push({ name: "twitter:creator", content: options.twitterCreator });
  }
  if (pwa._manifestMeta) {
    head.link.push(pwa._manifestMeta);
  }
};

const workbox = (pwa) => {
  if (!pwa.workbox || !pwa.workbox.enabled) {
    return;
  }
  const options = pwa.workbox;
  const nuxt = useNuxt();
  if (nuxt.options.dev) {
    console.warn("Workbox is running in development mode");
  }
  const { resolve } = createResolver(import.meta.url);
  if (!options.workboxUrl) {
    options.workboxUrl = `https://storage.googleapis.com/workbox-cdn/releases/${options.workboxVersion}/workbox-sw.js`;
  }
  addTemplate({
    src: resolve("../templates/workbox/sw.js"),
    dst: join(pwa._buildDir, "sw.js"),
    write: true,
    options
  });
  addPlugin({
    src: resolve("./runtime/workbox/plugin"),
    mode: "client"
  });
};

const module = defineNuxtModule({
  meta: {
    name: "pwa"
  },
  defaults: (nuxt) => ({
    icon: {
      source: null,
      sizes: [],
      fileName: "icon.png",
      targetDir: "icons"
    },
    manifest: {
      name: process.env.npm_package_name,
      short_name: process.env.npm_package_name,
      description: process.env.npm_package_description,
      lang: "en",
      start_url: nuxt.options.app.baseURL + "?standalone=true",
      display: "standalone",
      background_color: "#ffffff",
      theme_color: "#000000",
      icons: []
    },
    meta: {
      name: process.env.npm_package_name,
      author: process.env.npm_package_author_name,
      description: process.env.npm_package_description,
      favicon: true,
      mobileApp: true,
      mobileAppIOS: false,
      appleStatusBarStyle: false,
      theme_color: void 0,
      lang: "en",
      ogType: "website",
      ogSiteName: true,
      ogTitle: true,
      ogDescription: true,
      ogImage: true,
      ogHost: void 0,
      ogUrl: true,
      twitterCard: void 0,
      twitterSite: void 0,
      twitterCreator: void 0
    },
    workbox: {
      enabled: !nuxt.options.dev,
      workboxVersion: "6.5.3",
      workboxUrl: null
    }
  }),
  setup(options, nuxt) {
    const pwa = {
      ...options,
      _buildDir: join$1(nuxt.options.buildDir, "pwa")
    };
    icon(pwa);
    manifest(pwa);
    meta(pwa);
    workbox(pwa);
    const { nitro } = nuxt.options;
    nitro.publicAssets = nitro.publicAssets || [];
    nitro.publicAssets.push({ dir: pwa._buildDir });
  }
});

export { module as default };
